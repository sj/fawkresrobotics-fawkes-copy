<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE interface SYSTEM "interface.dtd">
<interface name="ObjectPositionInterface" author="Tim Niemueller" year="2007-2008">
  <constants>
    <!-- The range [0..1024] is reserved for standard types.
	 The range [65535..16777216] can be used for application specific custom values. -->
    <constant type="uint32" value="0" name="TYPE_OTHER">
      This constant denotes an object that cannot be denoted by any other constant.
    </constant>
    <constant type="uint32" value="1" name="TYPE_BALL">
      This constant denotes a ball object.
    </constant>
    <constant type="uint32" value="2" name="TYPE_OPPONENT">
      This constant denotes an opponent robot.
    </constant>
    <constant type="uint32" value="3" name="TYPE_TEAMMEMBER">
      This constant denotes a robot of the same team.
    </constant>
    <constant type="uint32" value="4" name="TYPE_LINE">
      The represented object is a line. The starting point is given in world_x/y/z
      and the end point is pointed to by a vector stored in extent_x/y/z.
    </constant>
    <constant type="uint32" value="5" name="TYPE_SELF">
      This constant denotes my own position.
    </constant>
    <constant type="uint32" value="6" name="TYPE_GOAL_BLUE">
      This constant denotes the position of the sky-blue goal.
    </constant>
    <constant type="uint32" value="7" name="TYPE_GOAL_YELLOW">
      This constant denotes the position of the yellow goal.
    </constant>

    <!-- Note that since these flags are bit-wise OR'ed the values must be chosen such that
	 the equation f = 2^n holds, for f being the flag value and n a natural number. -->
    <constant type="uint32" value="0" name="FLAG_NONE">
      No flags set.
    </constant>
    <constant type="uint32" value="1" name="FLAG_HAS_WORLD">
      This interface has world_* fields set to valid values.
    </constant>
    <constant type="uint32" value="2" name="FLAG_HAS_RELATIVE_CARTESIAN">
      This interface has relative_* fields set to valid values.
    </constant>
    <constant type="uint32" value="4" name="FLAG_HAS_RELATIVE_POLAR">
      This interface provides valid values for bearing, slope and distance.
    </constant>
    <constant type="uint32" value="8" name="FLAG_HAS_EULER_ANGLES">
      The roll/pitch/yaw values are set with Euler angles in the relative coordinate system.
    </constant>
    <constant type="uint32" value="16" name="FLAG_HAS_EXTENT">
      The extent_* fields are set with proper extent values.
    </constant>
    <constant type="uint32" value="32" name="FLAG_HAS_VOLUME_EXTENT">
      The extent_* fields are set with proper extent values for the volume of an
      object (opposed to the vector from the starting point in case of a line).
      This value shall only be valid if FLAG_HAS_EXTENT is set as well.
    </constant>
    <constant type="uint32" value="64" name="FLAG_HAS_CIRCULAR_EXTENT">
      Of the extent values only extent_x is set with the diameter of the object.
    </constant>
    <constant type="uint32" value="128" name="FLAG_HAS_COVARIANCES">
      The model provides valid covariances for the values that are provided (check
      other flags for which values are provided).
    </constant>
    <constant type="uint32" value="256" name="FLAG_HAS_WORLD_VELOCITY">
      Proper velocities in the cartesian world coordinate system are provided along
      the axes (world_*_velocity fields).
    </constant>
    <constant type="uint32" value="512" name="FLAG_HAS_Z_AS_ORI">
      The Z-coordinate of any coordinate is an orientation.
    </constant>
    <constant type="uint32" value="1024" name="FLAG_IS_FIXED_OBJECT">
      This object is fixed and the world model should update its position
      according to the odometry, iff the object is not visible.
    </constant>
  </constants>
  <data>
    <comment>
      This interface provides access to arbitrary object positions and velocities. You
      can use it to store the position of any object in the RoboCup domain. There is a type
      indicator for the RoboCup soccer domain to easily distinguish several well
      known objects. You may choose not to use this for other application in which case
      the value should be other (which is also the default).
    </comment>
    <field type="uint32" name="object_type">
      Object type, use constants to define
    </field>
    <field type="uint32" name="flags">
      Bit-wise concatenated fields of FLAG_* constants. Denotes features that the
      writer of this interfaces provides. Use a bit-wise OR to concatenate multiple
      flags, use a bit-wise AND to check if a flag has been set.
    </field>
    <field type="bool" name="visible">True, if object is visible.</field>
    <field type="int32" name="visibility_history">
      The visibilitiy history indicates the number of consecutive positive or negative
      sightings. If the history is negative, there have been as many negative sightings
      (object not visible) as the absolute value of the history. A positive value denotes
      as many positive sightings. 0 shall only be used during the initialisation of the
      interface or if the visibility history is not filled.
    </field>
    <field type="float" name="roll">
      Roll value for the orientation of the object in space.
    </field>
    <field type="float" name="pitch">
      Pitch value for the orientation of the object in space.
    </field>
    <field type="float" name="yaw">
      Yaw value for the orientation of the object in space.
    </field>
    <field type="float" name="distance">
      Distance from the robot to the object on the ground plane. The distance is given
      in meters.
    </field>
    <field type="float" name="bearing">
      Angle between the robot's forward direction and the object on the ground plane.
      This angle is in a local 3D coordinate system to the robot and given in radians.
    </field>
    <field type="float" name="slope">
      Angle between the robot's center position on the ground plane and the middle point
      of the object (e.g. this denotes the height of the object combined with the distance.
      The angle is given in radians.
    </field>
    <field type="float" name="dbs_covariance" length="9">
      Covariance of Distance/Yaw/Pitch values. This is a 3x3 matrix ordered line by line,
      first three values represent row, next tree values second row and last three values
      last row from left to right each.
    </field>
    <field type="float" name="world_x">
      This is the X coordinate in the cartesian right-handed world coordinate system.
      This coordinate system has its origin in the center of the field, Y pointing to
      the opponent's goal and X pointing to the right.
    </field>
    <field type="float" name="world_y">
      This is the Y coordinate in the cartesian right-handed world coordinate system.
      This coordinate system has its origin in the center of the field, Y pointing to
      the opponent's goal and X pointing to the right and Z pointing downwards.
    </field>
    <field type="float" name="world_z">
      This is the Z coordinate in the cartesian right-handed world coordinate system.
      This coordinate system has its origin in the center of the field, Y pointing to
      the opponent's goal and X pointing to the right.
    </field>
    <field type="float" name="world_xyz_covariance" length="9">
      Covariance of WorldX/WorldY/WorldZ values. This is a 3x3 matrix ordered line by line,
      first three values represent row, next tree values second row and last three values
      last row from left to right each.
    </field>
    <field type="float" name="relative_x">
      This is the X coordinate in the cartesian right-handed robot coordinate system.
    </field>
    <field type="float" name="relative_y">
      This is the Y coordinate in the cartesian right-handed robot coordinate system.
    </field>
    <field type="float" name="relative_z">
      This is the Z coordinate in the cartesian right-handed robot coordinate system.
    </field>
    <field type="float" name="relative_xyz_covariance" length="9">
      Covariance of relative x/y/z values. This is a 3x3 matrix ordered line by line,
      first three values represent row, next tree values second row and last three values
      last row from left to right each.
    </field>

    <field type="float" name="extent_x">
      Extent of the seen object given in the relative x cartesian coordinate in m.
    </field>
    <field type="float" name="extent_y">
      Extent of the seen object given in the relative y cartesian coordinate in m.
    </field>
    <field type="float" name="extent_z">
      Extent of the seen object given in the relative z cartesian coordinate in m.
    </field>

    <field type="float" name="world_x_velocity">
      Velocity of object in the world coordinate system in X-direction in meter per second.
    </field>
    <field type="float" name="world_y_velocity">
      Velocity of object in the world coordinate system in Y-direction in meter per second.
    </field>
    <field type="float" name="world_z_velocity">
      Velocity of object in the world coordinate system in Z-direction in meter per second.
    </field>
    <field type="float" name="world_xyz_velocity_covariance" length="9">
      Covariance of WorldX/WorldY/WorldZ velocity values. This is a 3x3 matrix ordered line
      by line, first three values represent row, next tree values second row and last three
      values last row from left to right each.
    </field>

    <field type="float" name="relative_x_velocity">
      Velocity of object in the world coordinate system in X-direction in meter per second.
    </field>
    <field type="float" name="relative_y_velocity">
      Velocity of object in the world coordinate system in Y-direction in meter per second.
    </field>
    <field type="float" name="relative_z_velocity">
      Velocity of object in the world coordinate system in Z-direction in meter per second.
    </field>
    <field type="float" name="relative_xyz_velocity_covariance" length="9">
      Covariance of relative x/y/z velocity values. This is a 3x3 matrix ordered line
      by line, first three values represent row, next tree values second row and last three
      values last row from left to right each.
    </field>

  </data>
</interface>
